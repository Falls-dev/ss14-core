using Content.Shared.Ghost;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
        [Dependency] private readonly PrototypeManager _prototypeManager = default!;

        private List<GhostWarpPlayer> _playerWarps = new();
        private List<GhostWarpPlace> _placeWarps = new();

        private Dictionary<GhostWarpPlayer, string> _alivePlayers = new();
        private Dictionary<GhostWarpPlayer, string> _leftPlayers = new();
        private Dictionary<GhostWarpPlayer, string> _deadPlayers = new();
        private Dictionary<GhostWarpPlayer, string> _ghostPlayers = new();

        private List<string> _departmentStyles = new List<string>
        {
            "ButtonColorCommandDepartment",
            "ButtonColorSecurityDepartment",
            "ButtonColorMedicalDepartment",
            "ButtonColorEngineeringDepartment",
            "ButtonColorScienceDepartment",
            "ButtonColorCargoDepartment",
            "ButtonColorCivilianDepartment",
            "ButtonColorJusticeDepartment",
            "ButtonColorSpecificDepartment"
        };

        private List<string> _departmentNames = new List<string>
        {
            "Командование: ",
            "Служба Безопасности: ",
            "Медицинский: ",
            "Инженерный: ",
            "Научный: ",
            "Снабжение: ",
            "Сервис: ",
            "Отдел юстиции: ",
            "Другое: "
        };

        private string _searchText = string.Empty;

        public event Action<NetEntity>? WarpClicked;

        public GhostTargetWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate()
        {
            GhostTeleportContainter.DisposeAllChildren();
            PlayersAllocation();
            AddButtons();
        }

        public void UpdateWarps(List<GhostWarpPlayer> players, List<GhostWarpPlace> places)
        {
            _playerWarps = players;
            _placeWarps = places;
        }

        private void AddButtons()
        {
            AddPlayerButtons(_alivePlayers, "Живые", string.Empty, true); // Alive
            AddPlayerButtons(_deadPlayers, "Мертвые", string.Empty, true); // Dead
            AddPlayerButtons(_ghostPlayers, "Призраки", string.Empty, true); // Ghost
            AddPlayerButtons(_leftPlayers, "Вышедшие из тела", string.Empty, true); // Left
            AddPlaceButtons(_placeWarps, "ButtonColorSpecificDepartment");
        }

        private void AddPlayerButtons(Dictionary<GhostWarpPlayer, string> players, string text, string styleClass,
            bool enableByDepartmentColorSheet)
        {
            if (players.Count == 0)
                return;

            var bigGrid = new GridContainer();

            var bigLabel = new Label
            {
                Text = text,
                StyleClasses = { "LabelBig" }
            };
            bigGrid.AddChild(bigLabel);

            var sortedPlayers = SortPlayersByDepartment(players);

            foreach (var departmentList in sortedPlayers)
            {
                if (departmentList.Count == 0)
                    continue;

                var departmentGrid = new GridContainer
                {
                    Columns = 5,
                };

                if (enableByDepartmentColorSheet)
                    styleClass = _departmentStyles[sortedPlayers.IndexOf(departmentList)];

                var labelText = _departmentNames[sortedPlayers.IndexOf(departmentList)];

                var departmentLabel = new Label
                {
                    Text = labelText + departmentList.Count,
                    StyleClasses = { "LabelSecondaryColor" }
                };

                foreach (var player in departmentList)
                {
                    var playerButton = new Button
                    {
                        Text = player.Name,
                        TextAlign = Label.AlignMode.Right,
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        SizeFlagsStretchRatio = 1,
                        StyleClasses = { styleClass },
                        ToolTip = player.JobName,
                        TooltipDelay = 0.1f,
                        SetWidth = 180,
                    };

                    playerButton.OnPressed += _ => WarpClicked?.Invoke(player.Entity);
                    playerButton.Visible = ButtonIsVisible(playerButton);

                    departmentGrid.AddChild(playerButton);
                }

                bigGrid.AddChild(departmentLabel);
                bigGrid.AddChild(departmentGrid);
            }

            GhostTeleportContainter.AddChild(bigGrid);
        }

        private void AddPlaceButtons(List<GhostWarpPlace> places, string styleClass)
        {
            var bigGrid = new GridContainer();

            var bigLabel = new Label
            {
                Text = "Локации и объекты",
                StyleClasses = { "LabelBig" }
            };
            bigGrid.AddChild(bigLabel);

            var placesGrid = new GridContainer
            {
                Columns = 5,
            };

            var countLabel = new Label
            {
                Text = "Количество: " + places.Count,
                StyleClasses = { "LabelSecondaryColor" }
            };

            foreach (var place in places)
            {
                var placeButton = new Button
                {
                    Text = place.Name,
                    TextAlign = Label.AlignMode.Right,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    StyleClasses = { styleClass },
                    ToolTip = place.Description,
                    TooltipDelay = 0.1f,
                    SetWidth = 180,
                };

                placeButton.OnPressed += _ => WarpClicked?.Invoke(place.Entity);
                placeButton.Visible = ButtonIsVisible(placeButton);

                placesGrid.AddChild(placeButton);
            }

            bigGrid.AddChild(countLabel);
            bigGrid.AddChild(placesGrid);

            GhostTeleportContainter.AddChild(bigGrid);
        }

        private List<List<GhostWarpPlayer>> SortPlayersByDepartment(Dictionary<GhostWarpPlayer, string> players)
        {
            var bigList = new List<List<GhostWarpPlayer>>
            {
                new List<GhostWarpPlayer>(), // Command
                new List<GhostWarpPlayer>(), // Security
                new List<GhostWarpPlayer>(), // Medical
                new List<GhostWarpPlayer>(), // Engineering
                new List<GhostWarpPlayer>(), // Science
                new List<GhostWarpPlayer>(), // Cargo
                new List<GhostWarpPlayer>(), // Civilian
                new List<GhostWarpPlayer>(), // Justice
                new List<GhostWarpPlayer>(), // Specific
            };

            foreach (var (player, department) in players)
            {
                switch (department)
                {
                    case "Command":
                        bigList[0].Add(player);
                        break;

                    case "Security":
                        bigList[1].Add(player);
                        break;

                    case "Medical":
                        bigList[2].Add(player);
                        break;

                    case "Engineering":
                        bigList[3].Add(player);
                        break;

                    case "Science":
                        bigList[4].Add(player);
                        break;

                    case "Cargo":
                        bigList[5].Add(player);
                        break;

                    case "Civilian":
                        bigList[6].Add(player);
                        break;

                    case "Justice":
                        bigList[7].Add(player);
                        break;

                    case "Specific":
                        bigList[8].Add(player);
                        break;
                }
            }

            return bigList;
        }

        private void PlayersAllocation()
        {
            _alivePlayers.Clear();
            _deadPlayers.Clear();
            _leftPlayers.Clear();
            _ghostPlayers.Clear();

            foreach (var warp in _playerWarps)
            {
                if (warp.IsDead)
                    _deadPlayers.TryAdd(warp, warp.DepartmentID);
                else if (warp.IsLeft)
                    _leftPlayers.TryAdd(warp, warp.DepartmentID);
                else if (warp.IsAlive)
                    _alivePlayers.TryAdd(warp, warp.DepartmentID);
                else if (warp.IsGhost)
                    _ghostPlayers.TryAdd(warp, warp.DepartmentID);
            }
        }

        private bool ButtonIsVisible(Button button)
        {
            var a = string.IsNullOrEmpty(_searchText);
            var b = button.Text == null;
            var c = button.Text != null && button.Text.Contains(_searchText, StringComparison.OrdinalIgnoreCase);

            return a || b || c;
        }
    }
}
