﻿using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Shared._White.CartridgeLoader.Cartridges;

namespace Content.Client._White.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class MessagesUiFragment : BoxContainer
{

    public event Action<string>? OnMessageSent;
    public event Action<int?>? OnButtonPressed;

    public MessagesUiFragment()
    {
        RobustXamlLoader.Load(this);
        Input.OnTextEntered += _ =>
        {
            if (!string.IsNullOrEmpty(Input.Text))
                OnMessageSent?.Invoke(Input.Text);
            Input.Clear();
        };

        BackButton.OnPressed += _ => OnButtonPressed?.Invoke(null);

        UpdateState(MessagesUiStateMode.UserList, [], null);
    }

    public void UpdateState(MessagesUiStateMode mode, List<(string, int?)>? contents, string? name)
    {
        MessageContainer.DisposeAllChildren();
        Input.Orphan();
        BackButton.Orphan();

        if (contents == null)
            return;

        if (mode == MessagesUiStateMode.Chat)
        {
            HeaderLabel.Text = name;

            foreach (var (senderName, message) in contents)
            {
                AddNote($"{senderName} {message}");
            }

            OverContainer.AddChild(Input);
            HeaderBox.AddChild(BackButton);
            BackButton.SetPositionInParent(0);
        }
        else if (mode == MessagesUiStateMode.Error)
        {
            HeaderLabel.Text = Loc.GetString("messages-pda-error-header");
            AddNote(Loc.GetString("messages-pda-error-message"));
        }
        else
        {
            HeaderLabel.Text = Loc.GetString("messages-pda-chat-choice");
            foreach (var (user, userUid) in contents)
            {
                AddButton(userUid, user);
            }
        }
    }

    ///<summary>
    /// Adding a button for selecting a chat
    ///</summary>
    private void AddButton(int? userUid, string userName)
    {
        var button = new Button
        {
            Text = userName,
            HorizontalExpand = true,
            ClipText = true,
            MinWidth = 60
        };
        button.OnPressed += _ => OnButtonPressed?.Invoke(userUid);
        MessageContainer.AddChild(button);
    }

    ///<summary>
    /// Adding a text label to the message container
    ///</summary>
    private void AddNote(string note)
    {
        MessageContainer.AddChild(new Label
        {
            Text = note,
            HorizontalExpand = true,
            ClipText = false
        });
    }
}
