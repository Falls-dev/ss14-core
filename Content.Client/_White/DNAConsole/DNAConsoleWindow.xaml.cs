using Content.Client.Message;
using Content.Shared.DNAConsole;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.DNAConsole;

[GenerateTypedNameReferences]
public sealed partial class DNAConsoleWindow : DefaultWindow
{

public DNAConsoleWindow()
{
    RobustXamlLoader.Load(this);
}

private DNAConsoleBoundUserInterfaceState? _lastUpdate;

public void Populate(DNAConsoleBoundUserInterfaceState state)
        {
            _lastUpdate = state;
            // BUILD SCANNER UI
            if (state.ModifierConnected)
            {
                if (!state.ModifierInRange)
                {
                    DNAModifierFar.Visible = true;
                    DNAConsoleContent.Visible = false;
                    DNAModifierMissing.Visible = false;
                    return;
                }

                DNAConsoleContent.Visible = true;
                DNAModifierFar.Visible = false;
                DNAModifierMissing.Visible = false;

                switch (state.ModifierStatus)
                    {
                        case ModifierStatus.Ready:
                            ModifierActivity.Text = (Loc.GetString("dna-console-component-msg-ready"));
                            break;
                        case ModifierStatus.ModifierOccupied:
                            ModifierActivity.Text = (Loc.GetString("dna-console-component-msg-occupied"));
                            break;
                        case ModifierStatus.ModifierEmpty:
                            ModifierActivity.Text = (Loc.GetString("dna-console-component-msg-empty"));
                            break;
                        case ModifierStatus.OccupantMetaphyiscal:
                            ModifierActivity.Text = (Loc.GetString("dna-console-component-msg-already-alive"));
                            break;
                    }
                // Set label depending on if scanner is occupied or not.
                ModifierInfoLabel.SetMarkup(state.ModifierBodyInfo != null ?
                    Loc.GetString("dna-console-window-scanner-id", ("modifierOccupantName", state.ModifierBodyInfo)) :
                    Loc.GetString("dna-console-window-id-blank"));
            }
            else
            {
                // Scanner is missing, set error message visible
                DNAConsoleContent.Visible = false;
                DNAModifierFar.Visible = false;
                DNAModifierMissing.Visible = true;
            }

            // BUILD ClONER UI
            if (state.ModifierConnected)
            {
                if (!state.ModifierInRange)
                {
                    DNATest.Visible = false;
                    return;
                }

                DNATest.Visible = true;
            }
            else
            {
                // Clone pod is missing, set error message visible
                DNATest.Visible = false;
            }
        }

}

