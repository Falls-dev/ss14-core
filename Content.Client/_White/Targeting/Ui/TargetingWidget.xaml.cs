using System.Linq;
using Content.Shared._White.Targeting.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._White.Targeting.Ui;

[GenerateTypedNameReferences]
public sealed partial class TargetingWidget : UIWidget
{
    private readonly TargetingController _controller;
    private readonly Dictionary<TargetingBodyParts, TextureButton> _bodyPartControls;

    public TargetingWidget()
    {
        RobustXamlLoader.Load(this);
        _controller = UserInterfaceManager.GetUIController<TargetingController>();

        _bodyPartControls = GetBodyPartTextureButtons();

        foreach (var bodyPartButton in _bodyPartControls)
        {
            bodyPartButton.Value.MouseFilter = MouseFilterMode.Stop;

            bodyPartButton.Value.OnPressed += _ => SetActiveBodyPart(bodyPartButton.Key);
            bodyPartButton.Value.OnMouseEntered += _ => SetHoverBodyPart(bodyPartButton.Key);
            bodyPartButton.Value.OnMouseExited += _ => SetHoverBodyPart(bodyPartButton.Key);

            TargetDoll.Texture = Theme.ResolveTexture("targeting_doll");
        }
    }

    private Dictionary<TargetingBodyParts, TextureButton> GetBodyPartTextureButtons()
    {
        return new Dictionary<TargetingBodyParts, TextureButton>
        {
            { TargetingBodyParts.Head, HeadButton },
            { TargetingBodyParts.Chest, ChestButton },
            { TargetingBodyParts.Stomach, StomachButton },
            { TargetingBodyParts.LeftArm, LeftArmButton },
            { TargetingBodyParts.LeftHand, LeftHandButton },
            { TargetingBodyParts.RightArm, RightArmButton },
            { TargetingBodyParts.RightHand, RightHandButton },
            { TargetingBodyParts.LeftLeg, LeftLegButton },
            { TargetingBodyParts.LeftFoot, LeftFootButton },
            { TargetingBodyParts.RightLeg, RightLegButton },
            { TargetingBodyParts.RightFoot, RightFootButton },
        };
    }

    private void SetActiveBodyPart(TargetingBodyParts bodyPart)
    {
        _controller.CycleTarget(bodyPart);
    }

    public void SetBodyPartsVisible(TargetingBodyParts bodyPart)
    {
        foreach (var bodyPartButton in _bodyPartControls)
        {
            bodyPartButton.Value.Children.First().Visible = bodyPartButton.Key == bodyPart;
            if (bodyPartButton.Value.Children.Last().Visible && bodyPartButton.Key == bodyPart)
                bodyPartButton.Value.Children.Last().Visible = false;
        }
    }

    protected override void OnThemeUpdated()
    {
        TargetDoll.Texture = Theme.ResolveTexture("target_doll");
    }

    public void SetTargetDollVisible(bool visible)
    {
        Visible = visible;
    }

    public void SetHoverBodyPart(TargetingBodyParts bodyPart)
    {
        foreach (var bodyPartButton in _bodyPartControls.Where(bodyPartButton => bodyPartButton.Key == bodyPart && !bodyPartButton.Value.Children.First().Visible))
        {
            bodyPartButton.Value.Children.Last().Visible = !bodyPartButton.Value.Children.Last().Visible;
        }
    }
}
